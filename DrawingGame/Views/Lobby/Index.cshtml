<div class="container">
    <div class="lobby">
        <div class="lobby-players">
            <ul class="players">
            </ul>
        </div>
        <div class="lobby-drawarea">
            <canvas height="420" width="790" id="graphics"></canvas>
        </div>
        <div class="lobby-chat">
            <div class="lobby-chat-area">
                <ul class="chat">
                </ul>
            </div>
            <div class="lobby-chat-form">
                <div class="input-group">
                    <input type="text" class="form-control msg" placeholder="Text here">
                    <button class="btn btn-outline-primary sendBtn" type="button">Send</button>
                </div>
            </div>
        </div>
        <button class="btn btn-primary startBtn" style="box-sizing: border-box;" onclick="startGame()">Start the game</button>
    </div>
</div>

@*<div class="container" style=" height: 80vh;">
    <div class="row" style=" height: 100%;">
        <div class="col-3" style=" flex-direction: column; border: 1px solid black; display: flex; padding: 0; position:relative;   max-height: calc(100vh - 140px);">
            <span style="height:30px; position:absolute; background-color:white;padding-left:20px">Seznam ucastniku</span>
            <ul class="users" style="overflow-y:scroll;padding-top:30px;flex-grow:1;margin-bottom:0">
            </ul>
            <button class="startBtn" onclick="startGame()">Start</button>
        </div>
        <div class="col-9">
            <div style=" height: 70%; border: 1px solid black; margin-bottom: 10px;">
               Kreslici plocha
                <canvas style=" margin:2px;border: 1px solid red" id="graphics"></canvas>
            </div>
            <div style=" height: calc( 30% - 10px ); border: 1px solid black;display:flex; flex-direction:column">
                <span>chat</span>
                <ul class="chat" style="overflow-y:scroll;flex-grow:1">

                </ul>
                <div style="width: 100%; display:flex"><input type="text" class="msg" style="flex-grow:1" /><button class="sendBtn">Odeslat</button> </div>
            </div>
        </div>
    </div>
</div>*@
<script src="~/lib/signalr/signalr.min.js"></script>
<script>
    var nickName = prompt("Enter your nickname");

    var connection = new signalR.HubConnectionBuilder()
        .configureLogging("trace")
        .withUrl("/hub")
        .build();

    var sendBtn = document.querySelector(".sendBtn");
    sendBtn.addEventListener("click", function () {
        var msg = document.querySelector(".msg");
        connection.invoke("processMessage", msg.value);
    })

    function refreshUsers(users) {
        var ul = document.querySelector(".players");
        ul.innerHTML = "";
        for (var k in users) {
            var user = users[k];
            var item = document.createElement("li");
            if (user == nickName) {
                item.innerText = `${user} (You)`;
            }
            else{
                item.innerText = user;
            }
            ul.appendChild(item);
        }
    }
    function startGame() {
        connection.invoke("startGame");
    }
    connection.on("usersChanged", function (users) {
        refreshUsers(users);
    });
    connection.on("clearCanvas", function () {
        var c = document.querySelector("#graphics");
        var ctx = c.getContext("2d");
        ctx.clearRect(0, 0, c.width, c.height);
    });
    connection.on("guessed", function (user) {
        var players = document.querySelector(".players")
        for (let i = 0; i < players.childElementCount; i++) {
            if (players.children[i].innerText == user || players.children[i].innerHTML == `${user} (You)`) {
                players.children[i].style.color = "#00cc00"
            }
        }
    })
    connection.on("draw!", function () {
        var c = document.querySelector("#graphics");
        var ctx = c.getContext("2d");
        var lastX = -1, lastY = -1;
        var lines = [];
        c.addEventListener("mousedown", function (evt) {
            lines = [];
            lastX = evt.layerX;
            lastY = evt.layerY;
        });
        c.addEventListener("mousemove", function (evt) {

            if (evt.buttons == 1) { 
                ctx.beginPath();
                ctx.moveTo(lastX, lastY);
                ctx.lineTo(evt.layerX, evt.layerY);
                ctx.stroke();
                lines.push({ x: evt.layerX, y: evt.layerY });
                console.log(lastX, lastY, evt.layerX, evt.layerY);
            }
            lastX = evt.layerX;
            lastY = evt.layerY;
            //debugger;
        });
        c.addEventListener("mouseup", function (evt) {
            connection.invoke("sendLines", lines);
        });
        document.querySelector(".startBtn").setAttribute("disabled", "disabled");
        document.querySelector(".sendBtn").setAttribute("disabled", "disabled")
        document.querySelector(".msg").setAttribute("disabled", "disabled")
    });
    connection.on("chatMessage", function (msg) {
        var chat = document.querySelector(".chat");
        var li = document.createElement("li");
        if (msg.includes(":")) {
            var str = msg.split(":")
            li.innerHTML += `<b>${str[0]}</b>:`;
            li.innerHTML += str[1];
        }
        else {
            li.innerHTML = `<p style="font-weight: bold; color: #6a0fab; margin: 0;">${msg}</p>`;
        }
        chat.appendChild(li);
    });
    connection.on("guess!", function () {
        document.querySelector(".startBtn").setAttribute("disabled", "disabled");
        document.querySelector(".sendBtn").removeAttribute("disabled", "disabled")
        document.querySelector(".msg").removeAttribute("disabled", "disabled")
    });
    connection.on("drawLines", function (lines) {
        var c = document.querySelector("#graphics");
        var ctx = c.getContext("2d");
        if (lines.length > 0) {
            ctx.beginPath();
            ctx.moveTo(lines[0].x, lines[0].y);
        }
        for (var i = 1; i < lines.length; i++) {
            ctx.lineTo(lines[i].x, lines[i].y);
        }
        ctx.stroke();
    });
    connection.on("restart", function (users) {
        refreshUsers(users);
    })
    connection.start().then(t => {
        console.log("connected");
        connection.invoke("setProfile", nickName);
        connection.invoke("getUsers").then(function (users) {
            refreshUsers(users);
        });
        
    });
    connection.on("clearChat", function () {
        document.querySelector(".chat").innerHTML = ""
    })
</script>